from django.test import TestCase
from pastry_app.models import Ingredient, Category, Label
from pastry_app.tests.utils import normalize_case
from django.core.exceptions import ObjectDoesNotExist
from django.db import transaction, IntegrityError

class IngredientModelTest(TestCase):
    """Tests unitaires du mod√®le Ingredient"""

    def setUp(self):
        """Cr√©ation d‚Äôun ingr√©dient pour tester le mod√®le"""
        self.ingredient = Ingredient.objects.create(ingredient_name="Test Ingredient")

    def test_ingredient_creation(self):
        """ V√©rifie que l'on peut cr√©er un objet Ingredient"""
        self.assertIsInstance(self.ingredient, Ingredient)
        self.assertEqual(self.ingredient.ingredient_name, normalize_case("Test Ingredient"))

    def test_ingredient_str_method(self):
        """ V√©rifie que `__str__()` retourne bien le `ingredient_name`"""
        self.assertEqual(str(self.ingredient), normalize_case("Test Ingredient"))

    def test_ingredient_update(self):
        """ V√©rifie que l'on peut modifier un ingr√©dient"""
        self.ingredient.ingredient_name = "Updated Ingredient"
        self.ingredient.save()
        self.ingredient.refresh_from_db()
        self.assertEqual(self.ingredient.ingredient_name, normalize_case("Updated Ingredient"))

    def test_ingredient_deletion(self):
        """ V√©rifie que l'on peut supprimer un ingr√©dient"""
        ingredient_id = self.ingredient.id
        self.ingredient.delete()
        self.assertFalse(Ingredient.objects.filter(id=ingredient_id).exists())

    def test_ingredient_name_cannot_be_empty(self):
        """ V√©rifie qu'on ne peut pas cr√©er un ingr√©dient sans `ingredient_name`"""
        with self.assertRaises(Exception):
            Ingredient.objects.create(ingredient_name=None)

    def test_ingredient_can_have_categories(self):
        """üîç V√©rifie qu'un ingr√©dient peut √™tre associ√© √† des cat√©gories."""
        ingredient = Ingredient.objects.create(ingredient_name="Chocolat Noir")
        category = Category.objects.create(category_name="Chocolat")
        ingredient.categories.add(category)  # Assigner une cat√©gorie

        self.assertIn(category, ingredient.categories.all())  # V√©rifier l‚Äôassociation

    def test_ingredient_can_have_labels(self):
        """ V√©rifie qu'un ingr√©dient peut √™tre associ√© √† des labels."""
        ingredient = Ingredient.objects.create(ingredient_name="Chocolat Noir")
        label = Label.objects.create(label_name="Bio")
        ingredient.labels.add(label)  # Assigner un label

        self.assertIn(label, ingredient.labels.all())  # V√©rifier l‚Äôassociation

    def test_cannot_assign_nonexistent_category(self):
        """ V√©rifie qu'on ne peut pas assigner une cat√©gorie qui n'existe pas."""
        ingredient = Ingredient.objects.create(ingredient_name="Chocolat")
        
        with self.assertRaises(IntegrityError):  # La base de donn√©es doit lever une erreur
            with transaction.atomic():  # ‚úÖ Force Django √† ex√©cuter imm√©diatement la requ√™te SQL
                ingredient.categories.set([9999])  # 9999 est un ID qui n'existe pas

    def test_cannot_assign_nonexistent_label(self):
        """ V√©rifie qu'on ne peut pas assigner un label qui n'existe pas."""
        ingredient = Ingredient.objects.create(ingredient_name="Chocolat")
        
        with self.assertRaises(IntegrityError):  # La base de donn√©es doit lever une erreur
            with transaction.atomic():  # ‚úÖ Force Django √† ex√©cuter imm√©diatement la requ√™te SQL
                ingredient.labels.set([9999])  # 9999 est un ID qui n‚Äôexiste pas
