from pastry_app.models import Category
from rest_framework import status
from django.core.exceptions import ValidationError
import pytest, json
from pastry_app.tests.base_api_test import api_client, base_url
from pastry_app.tests.utils import normalize_case
from pastry_app.constants import CATEGORY_NAME_CHOICES, CATEGORY_DEFINITIONS

# D√©finir model_name pour les tests de Category
model_name = "categories"

@pytest.mark.django_db
def test_create_category_without_name(api_client, base_url):
    """V√©rifie qu'on ne peut PAS cr√©er une Category sans `category_name` via l'API"""
    url = base_url(model_name)
    response = api_client.post(url, {})
    assert response.status_code == status.HTTP_400_BAD_REQUEST
    assert "category_name" in response.json()

@pytest.mark.django_db
def test_create_duplicate_category(api_client, base_url):
    """V√©rifie qu'on ne peut PAS cr√©er deux Category avec le m√™me `category_name` via l'API, peu importe la casse"""
    url = base_url(model_name)

    # Cr√©ation de la premi√®re cat√©gorie via l'API
    response1 = api_client.post(url, data=json.dumps({"category_name": CATEGORY_NAME_CHOICES[0]}), content_type="application/json")
    assert response1.status_code == status.HTTP_201_CREATED  # V√©rifie que la premi√®re cr√©ation r√©ussit

    # Essayer de cr√©er une deuxi√®me cat√©gorie avec le m√™me nom via l'API (avec la m√™me casse ou diff√©rente)
    response2 = api_client.post(url, data=json.dumps({"category_name": normalize_case(CATEGORY_NAME_CHOICES[0])}), content_type="application/json")

    # V√©rifier que l'API refuse le doublon avec un code 400
    assert response2.status_code == status.HTTP_400_BAD_REQUEST
    assert "category_name" in response2.json()

@pytest.mark.django_db
def test_create_category_invalid_name(api_client, base_url):
    """ V√©rifie qu'on ne peut PAS cr√©er une Category avec un `category_name` invalide """
    url = base_url(model_name)

    response = api_client.post(url, data={"category_name": "azerty"})  # "azerty" n'est pas dans `CATEGORY_NAME_CHOICES`
    assert response.status_code == status.HTTP_400_BAD_REQUEST
    assert "category_name" in response.json()  # V√©rifie que l'API bloque bien

@pytest.mark.django_db
def test_category_name_cannot_be_empty():
    """V√©rifie qu'on ne peut pas cr√©er une cat√©gorie avec un nom vide."""
    with pytest.raises(ValidationError):
        category = Category(category_name="")
        category.full_clean()

@pytest.mark.django_db
def test_category_name_is_normalized():
    """V√©rifie que le `category_name` est bien normalis√© (minuscule, sans espaces inutiles)."""
    category = Category.objects.create(category_name=f"  {CATEGORY_NAME_CHOICES[0].upper()}  ")
    assert category.category_name == CATEGORY_NAME_CHOICES[0]

# üî¥ Attention : Ce test d'unicit√© (test_update_category_to_duplicate) fonctionnent UNIQUEMENT si `unique=True` est retir√© du mod√®le.
# Si `unique=True`, Django bloque la validation AVANT que l'API ne r√©ponde -> `IntegrityError`
# Solution recommand√©e :
# 1Ô∏è. Tester l'unicit√© dans l'API avec `validate_category_name()` dans `serializers.py` (sans `unique=True`).
# 2Ô∏è. En production, remettre `unique=True` dans `models.py` pour s√©curiser la base, mais NE PAS tester cela avec pytest.
#    Si ces tests √©chouent avec `unique=True`, c'est normal et tu peux ignorer l'erreur !
@pytest.mark.django_db
def test_update_category_to_duplicate(api_client, base_url):
    """V√©rifie qu'on ne peut PAS modifier une Category pour lui donner un `category_name` d√©j√† existant"""
    url = base_url(model_name)

    # S√©lectionner deux cat√©gories distinctes dynamiquement
    category_names = CATEGORY_NAME_CHOICES[:2]  # Prend les deux premi√®res cat√©gories disponibles
    if len(category_names) < 2:
        pytest.skip("Pas assez de cat√©gories disponibles pour ce test.")

    category1, category2 = category_names  # Assigne deux cat√©gories diff√©rentes

    # Cr√©er deux cat√©gories diff√©rentes
    response1 = api_client.post(url, {"category_name": category1})
    response2 = api_client.post(url, {"category_name": category2})

    assert response1.status_code == status.HTTP_201_CREATED
    assert response2.status_code == status.HTTP_201_CREATED
    # V√©rification que la r√©ponse contient bien l'ID
    category_id = response2.json()["id"]

    # Essayer de renommer "Viennoiseries" en "Desserts"
    response3 = api_client.patch(f"{url}{category_id}/", {"category_name": category1})

    # V√©rifier que l'API refuse la modification
    assert response3.status_code == status.HTTP_400_BAD_REQUEST
    assert "category_name" in response3.json()

def test_category_type_choices():
    """V√©rifie que les choix pour `category_type` sont correctement d√©finis √† partir de CATEGORY_DEFINITIONS."""
    valid_types = {c_type for _, _, c_type in CATEGORY_DEFINITIONS}  # R√©cup√®re les types uniques
    assert "ingredient" in valid_types
    assert "recipe" in valid_types
    assert "both" in valid_types


########## n‚Äôa plus d‚Äôint√©r√™t, car on ne peut pas choisir category_type librement. ##########

# @pytest.mark.django_db
# def test_category_type_must_be_valid():
#     """V√©rifie que `category_type` ne peut prendre que des valeurs valides."""
#     with pytest.raises(ValidationError):
#         category = Category(category_name="Test", category_type="invalide")
#         category.full_clean()

# @pytest.mark.django_db
# def test_category_name_cannot_be_too_short():
#     """V√©rifie qu'on ne peut pas cr√©er une cat√©gorie avec un nom trop court."""
#     with pytest.raises(ValidationError):
#         category = Category(category_name="A")
#         category.full_clean()

# @pytest.mark.django_db
# def test_category_name_cannot_be_numeric():
#     """V√©rifie qu'une cat√©gorie ne peut pas √™tre uniquement compos√©e de chiffres."""
#     with pytest.raises(ValidationError):
#         category = Category(category_name="12345")
#         category.full_clean()
