# Generated by Django 4.2.6 on 2025-08-15 14:26

from django.conf import settings
import django.contrib.postgres.fields
import django.contrib.postgres.indexes
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('pastry_app', '0001_enable_pgtrgm'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category_name', models.CharField(max_length=200, unique=True, verbose_name='category_name')),
                ('category_type', models.CharField(choices=[('ingredient', 'Ingrédient'), ('recipe', 'Recette'), ('both', 'Les deux')], max_length=10)),
                ('parent_category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='subcategories', to='pastry_app.category')),
            ],
            options={
                'verbose_name_plural': 'categories',
            },
        ),
        migrations.CreateModel(
            name='Ingredient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ingredient_name', models.CharField(max_length=200, unique=True)),
                ('guest_id', models.CharField(blank=True, db_index=True, max_length=64, null=True)),
                ('visibility', models.CharField(choices=[('private', 'Privée'), ('public', 'Publique')], default='private', max_length=10)),
                ('is_default', models.BooleanField(default=False)),
                ('categories', models.ManyToManyField(blank=True, related_name='ingredients', to='pastry_app.category')),
            ],
            options={
                'ordering': ['ingredient_name'],
            },
        ),
        migrations.CreateModel(
            name='Label',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label_name', models.CharField(max_length=200, unique=True, verbose_name='label_name')),
                ('label_type', models.CharField(choices=[('ingredient', 'Ingrédient'), ('recipe', 'Recette'), ('both', 'Les deux')], default='both', max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='Pan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pan_name', models.CharField(blank=True, max_length=200, null=True, unique=True)),
                ('pan_type', models.CharField(choices=[('ROUND', 'Rond'), ('RECTANGLE', 'Rectangulaire'), ('CUSTOM', 'Silicone / Forme libre')], max_length=20)),
                ('pan_brand', models.CharField(blank=True, max_length=100, null=True)),
                ('units_in_mold', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('guest_id', models.CharField(blank=True, db_index=True, max_length=64, null=True)),
                ('visibility', models.CharField(choices=[('private', 'Privée'), ('public', 'Publique')], default='private', max_length=10)),
                ('is_default', models.BooleanField(default=False)),
                ('diameter', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.1)])),
                ('height', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.1)])),
                ('length', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.1)])),
                ('width', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.1)])),
                ('rect_height', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.1)])),
                ('volume_raw', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('is_total_volume', models.BooleanField(default=False, help_text="True si volume_raw est le volume total (toutes empreintes confondues), False si c'est le volume unitaire.")),
                ('unit', models.CharField(blank=True, choices=[('cm3', 'cm³'), ('L', 'Litres')], max_length=4, null=True)),
                ('volume_cm3_cache', models.FloatField(blank=True, editable=False, null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pans', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['pan_name', 'pan_type'],
            },
        ),
        migrations.CreateModel(
            name='Recipe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recipe_name', models.CharField(max_length=200)),
                ('chef_name', models.CharField(blank=True, max_length=100, null=True)),
                ('context_name', models.CharField(blank=True, default='', max_length=100, null=True)),
                ('source', models.CharField(blank=True, max_length=255, null=True)),
                ('recipe_type', models.CharField(choices=[('BASE', 'Recette de base'), ('VARIATION', 'Variante')], default='BASE', max_length=20)),
                ('servings_min', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('servings_max', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('pan_quantity', models.PositiveIntegerField(default=1, help_text="Nombre d'exemplaires de ce moule utilisés dans cette recette (ex: 6 cercles individuels).", validators=[django.core.validators.MinValueValidator(1)])),
                ('total_recipe_quantity', models.FloatField(blank=True, help_text='Quantité totale en g produite par cette recette (ex: 1200 pour 1200g de crème pâtissière)', null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('trick', models.TextField(blank=True, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='recipes/')),
                ('adaptation_note', models.CharField(blank=True, max_length=255, null=True)),
                ('tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=50), blank=True, default=list, size=None)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('guest_id', models.CharField(blank=True, db_index=True, max_length=64, null=True)),
                ('visibility', models.CharField(choices=[('private', 'Privée'), ('public', 'Publique')], default='private', max_length=10)),
                ('is_default', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['recipe_name', 'chef_name'],
            },
        ),
        migrations.CreateModel(
            name='SubRecipe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.FloatField(validators=[django.core.validators.MinValueValidator(0)])),
                ('unit', models.CharField(choices=[('mg', 'mg'), ('g', 'g'), ('kg', 'kg'), ('ml', 'ml'), ('cl', 'cl'), ('l', 'l')], max_length=50)),
                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='main_recipes', to='pastry_app.recipe')),
                ('sub_recipe', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='used_in_recipes', to='pastry_app.recipe')),
            ],
        ),
        migrations.CreateModel(
            name='Store',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('store_name', models.CharField(max_length=200)),
                ('city', models.CharField(blank=True, max_length=100, null=True)),
                ('zip_code', models.CharField(blank=True, max_length=10, null=True)),
                ('address', models.CharField(blank=True, max_length=200, null=True)),
                ('guest_id', models.CharField(blank=True, db_index=True, max_length=64, null=True)),
                ('visibility', models.CharField(choices=[('private', 'Privée'), ('public', 'Publique')], default='private', max_length=10)),
                ('is_default', models.BooleanField(default=False)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='stores', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='RecipeStep',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('step_number', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('instruction', models.TextField(max_length=250)),
                ('trick', models.TextField(blank=True, max_length=100, null=True)),
                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='steps', to='pastry_app.recipe')),
            ],
            options={
                'ordering': ['recipe', 'step_number'],
            },
        ),
        migrations.CreateModel(
            name='RecipeLabel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='pastry_app.label')),
                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pastry_app.recipe')),
            ],
            options={
                'verbose_name': 'recipe labels',
                'verbose_name_plural': 'labels',
            },
        ),
        migrations.CreateModel(
            name='RecipeIngredient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.FloatField(validators=[django.core.validators.MinValueValidator(0)])),
                ('unit', models.CharField(choices=[('mg', 'Miligrams'), ('g', 'Grams'), ('kg', 'Kilograms'), ('ml', 'Milliliters'), ('cl', 'Centiliters'), ('l', 'Liters'), ('tsp', 'Teaspoons'), ('tbsp', 'Tablespoons'), ('cas', 'Cuillère à soupe'), ('cac', 'Cuillère à café'), ('cup', 'Cups'), ('unit', 'Unit')], max_length=50)),
                ('display_name', models.CharField(blank=True, max_length=255, null=True)),
                ('ingredient', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='ingredient_recipes', to='pastry_app.ingredient')),
                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recipe_ingredients', to='pastry_app.recipe')),
            ],
            options={
                'ordering': ['recipe', 'ingredient'],
            },
        ),
        migrations.CreateModel(
            name='RecipeCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='pastry_app.category')),
                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pastry_app.recipe')),
            ],
            options={
                'verbose_name': 'recipe category',
                'verbose_name_plural': 'categories',
            },
        ),
        migrations.AddField(
            model_name='recipe',
            name='categories',
            field=models.ManyToManyField(related_name='recipes', through='pastry_app.RecipeCategory', to='pastry_app.category'),
        ),
        migrations.AddField(
            model_name='recipe',
            name='ingredients',
            field=models.ManyToManyField(related_name='recipes', through='pastry_app.RecipeIngredient', to='pastry_app.ingredient'),
        ),
        migrations.AddField(
            model_name='recipe',
            name='labels',
            field=models.ManyToManyField(related_name='recipes', through='pastry_app.RecipeLabel', to='pastry_app.label'),
        ),
        migrations.AddField(
            model_name='recipe',
            name='owned_by_recipe',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='owned_variants', to='pastry_app.recipe'),
        ),
        migrations.AddField(
            model_name='recipe',
            name='pan',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='pastry_app.pan'),
        ),
        migrations.AddField(
            model_name='recipe',
            name='parent_recipe',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='versions', to='pastry_app.recipe'),
        ),
        migrations.AddField(
            model_name='recipe',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='recipes', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='IngredientUnitReference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unit', models.CharField(choices=[('mg', 'Miligrams'), ('g', 'Grams'), ('kg', 'Kilograms'), ('ml', 'Milliliters'), ('cl', 'Centiliters'), ('l', 'Liters'), ('tsp', 'Teaspoons'), ('tbsp', 'Tablespoons'), ('cas', 'Cuillère à soupe'), ('cac', 'Cuillère à café'), ('cup', 'Cups'), ('unit', 'Unit')], help_text='Unité (ex : unité, cas, cc, cup, tranche, etc.)', max_length=20)),
                ('weight_in_grams', models.FloatField(help_text='Poids en grammes correspondant à 1 unité de cet ingrédient.')),
                ('notes', models.CharField(blank=True, help_text='Commentaire, astuce ou source (optionnel).', max_length=200)),
                ('is_hidden', models.BooleanField(default=False, help_text='Masque cette référence (soft-delete pour forker une globale)')),
                ('guest_id', models.CharField(blank=True, db_index=True, max_length=64, null=True)),
                ('ingredient', models.ForeignKey(help_text='Ingrédient concerné', on_delete=django.db.models.deletion.CASCADE, related_name='unit_references', to='pastry_app.ingredient')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ingredient_unit_references', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Référence de conversion unité ➔ poids',
                'verbose_name_plural': 'Références de conversion unité ➔ poids',
                'ordering': ['ingredient', 'unit', 'is_hidden'],
            },
        ),
        migrations.CreateModel(
            name='IngredientPriceHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ingredient_name', models.CharField(blank=True, default='', max_length=255, null=True)),
                ('brand_name', models.CharField(blank=True, default=None, max_length=200, null=True)),
                ('quantity', models.FloatField(validators=[django.core.validators.MinValueValidator(0)])),
                ('unit', models.CharField(choices=[('mg', 'Miligrams'), ('g', 'Grams'), ('kg', 'Kilograms'), ('ml', 'Milliliters'), ('cl', 'Centiliters'), ('l', 'Liters'), ('tsp', 'Teaspoons'), ('tbsp', 'Tablespoons'), ('cas', 'Cuillère à soupe'), ('cac', 'Cuillère à café'), ('cup', 'Cups'), ('unit', 'Unit')], max_length=50)),
                ('price', models.FloatField(validators=[django.core.validators.MinValueValidator(0)])),
                ('is_promo', models.BooleanField(default=False)),
                ('promotion_end_date', models.DateField(blank=True, null=True)),
                ('date', models.DateField(blank=True, default=django.utils.timezone.now, null=True)),
                ('ingredient', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='pastry_app.ingredient')),
                ('store', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='pastry_app.store')),
            ],
            options={
                'verbose_name_plural': 'ingredient prices history',
            },
        ),
        migrations.CreateModel(
            name='IngredientPrice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('brand_name', models.CharField(blank=True, default=None, max_length=200, null=True)),
                ('quantity', models.FloatField(validators=[django.core.validators.MinValueValidator(0)])),
                ('unit', models.CharField(choices=[('mg', 'Miligrams'), ('g', 'Grams'), ('kg', 'Kilograms'), ('ml', 'Milliliters'), ('cl', 'Centiliters'), ('l', 'Liters'), ('tsp', 'Teaspoons'), ('tbsp', 'Tablespoons'), ('cas', 'Cuillère à soupe'), ('cac', 'Cuillère à café'), ('cup', 'Cups'), ('unit', 'Unit')], max_length=50)),
                ('price', models.FloatField(validators=[django.core.validators.MinValueValidator(0)])),
                ('date', models.DateField(blank=True, default=django.utils.timezone.now, null=True)),
                ('is_promo', models.BooleanField(default=False)),
                ('promotion_end_date', models.DateField(blank=True, null=True)),
                ('ingredient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prices', to='pastry_app.ingredient')),
                ('store', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='prices', to='pastry_app.store')),
            ],
        ),
        migrations.CreateModel(
            name='IngredientLabel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ingredient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pastry_app.ingredient')),
                ('label', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='pastry_app.label')),
            ],
        ),
        migrations.CreateModel(
            name='IngredientCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='pastry_app.category')),
                ('ingredient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pastry_app.ingredient')),
            ],
        ),
        migrations.AddField(
            model_name='ingredient',
            name='labels',
            field=models.ManyToManyField(blank=True, related_name='ingredients', to='pastry_app.label'),
        ),
        migrations.AddField(
            model_name='ingredient',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ingredients', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='UserRecipeVisibility',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('guest_id', models.CharField(blank=True, db_index=True, max_length=64, null=True)),
                ('visible', models.BooleanField(default=True)),
                ('hidden_at', models.DateTimeField(auto_now_add=True)),
                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pastry_app.recipe')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='hidden_recipes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'guest_id', 'recipe')},
            },
        ),
        migrations.AddIndex(
            model_name='store',
            index=models.Index(fields=['store_name', 'city', 'zip_code'], name='pastry_app__store_n_cde1df_idx'),
        ),
        migrations.AddConstraint(
            model_name='store',
            constraint=models.UniqueConstraint(fields=('store_name', 'city', 'zip_code', 'address'), name='unique_store_per_location'),
        ),
        migrations.AddConstraint(
            model_name='recipestep',
            constraint=models.UniqueConstraint(fields=('recipe', 'step_number'), name='unique_step_per_recipe'),
        ),
        migrations.AddIndex(
            model_name='recipe',
            index=django.contrib.postgres.indexes.GinIndex(fields=['recipe_name'], name='idx_recipe_name_trgm', opclasses=['gin_trgm_ops']),
        ),
        migrations.AddIndex(
            model_name='recipe',
            index=django.contrib.postgres.indexes.GinIndex(fields=['chef_name'], name='idx_chef_name_trgm', opclasses=['gin_trgm_ops']),
        ),
        migrations.AddIndex(
            model_name='recipe',
            index=django.contrib.postgres.indexes.GinIndex(fields=['context_name'], name='idx_context_name_trgm', opclasses=['gin_trgm_ops']),
        ),
        migrations.AddIndex(
            model_name='recipe',
            index=django.contrib.postgres.indexes.GinIndex(fields=['tags'], name='idx_recipe_tags_gin'),
        ),
        migrations.AddConstraint(
            model_name='recipe',
            constraint=models.UniqueConstraint(fields=('recipe_name', 'chef_name', 'context_name'), name='unique_recipe_per_context'),
        ),
        migrations.AddConstraint(
            model_name='recipe',
            constraint=models.UniqueConstraint(condition=models.Q(models.Q(('owned_by_recipe', None), _negated=True), models.Q(('parent_recipe', None), _negated=True)), fields=('owned_by_recipe', 'parent_recipe'), name='uniq_owned_variant_per_host_and_source'),
        ),
        migrations.AddConstraint(
            model_name='pan',
            constraint=models.UniqueConstraint(fields=('pan_name',), name='unique_pan_name'),
        ),
        migrations.AddIndex(
            model_name='ingredientunitreference',
            index=models.Index(fields=['ingredient', 'unit', 'is_hidden', 'user', 'guest_id'], name='iur_ing_unit_visible_owner'),
        ),
        migrations.AddIndex(
            model_name='ingredientunitreference',
            index=models.Index(condition=models.Q(('is_hidden', False)), fields=['ingredient', 'unit', 'user', 'guest_id'], name='iur_ing_unit_owner_visible'),
        ),
        migrations.AddIndex(
            model_name='ingredientunitreference',
            index=models.Index(condition=models.Q(('is_hidden', False)), fields=['ingredient', 'unit'], name='iur_ing_unit_only'),
        ),
        migrations.AddConstraint(
            model_name='ingredientunitreference',
            constraint=models.UniqueConstraint(fields=('ingredient', 'unit', 'user', 'guest_id', 'is_hidden'), name='unique_ingredient_unit_user_guest_hidden'),
        ),
        migrations.AlterUniqueTogether(
            name='ingredientunitreference',
            unique_together={('ingredient', 'unit', 'user', 'guest_id')},
        ),
        migrations.AddConstraint(
            model_name='ingredientpricehistory',
            constraint=models.UniqueConstraint(fields=('ingredient', 'store', 'brand_name', 'quantity', 'unit'), name='unique_ingredient_price_history'),
        ),
        migrations.AddConstraint(
            model_name='ingredientprice',
            constraint=models.UniqueConstraint(fields=('ingredient', 'store', 'brand_name', 'quantity', 'unit'), name='unique_ingredient_price'),
        ),
    ]
