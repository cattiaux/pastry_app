Synthèse des Contraintes pour le Modèle Category


        CONTRAINTES	                                                                 TEST CORRESPONDANT
Création d’une catégorie	                                                        -> test_create_category
category_name unique (en API, unique=True en production)                            -> test_create_duplicate_category
category_name normalisé en minuscule                                                -> test_category_name_is_normalized
category_name ne peut pas être vide                                                 -> test_create_category_without_name
Mise à jour du category_name                                                        -> test_update_category
Suppression d’une catégorie existante                                               -> test_delete_category
Récupération d’une catégorie existante                                              -> test_get_category
Erreur 404 si catégorie inexistante	                                                -> test_get_nonexistent_category et test_delete_nonexistent_category
Suppression bloquée si la catégorie est utilisée (ingredient ou recipe)             -> test_delete_category_with_linked_objects
category_name doit exister dans CATEGORY_NAME_CHOICES                               -> test_create_category_invalid_name
Le category_type est automatiquement défini                                         -> test_category_type_assignment
Mise à jour interdite vers un category_name déjà existant                           -> test_update_category_to_duplicate
(OLD) category_name longueur min ≥ 2                                                -> test_category_name_cannot_be_too_short
(OLD) category_name ne peut pas être uniquement numérique                           -> test_category_name_cannot_be_numeric
(OLD) Mise à jour du category_type                                                  -> test_update_category_type
(OLD) category_type ne peut avoir que certaines valeurs (ingredient, recipe, both)  -> test_category_type_must_be_valid

Contraintes Métier :
    1. Nom de Catégorie (category_name) :
        ◦ Doit être unique.
        ◦ Ne peut pas être vide.
        ◦ Doit exister dans CATEGORY_NAME_CHOICES (contrôle strict).
        ◦ Est normalisé en minuscule.
    2. Type de Catégorie (category_type) : 
        ◦ Attribué automatiquement (values: recipe, ingredient, both) en fonction de category_name.
        ◦ Ne peut plus être défini manuellement par l’utilisateur.

Contraintes Techniques :
    1. Type de Données :
        ◦ category_name : CharField (max 200 caractères, valeurs prédéfinies).
        ◦ category_type : CharField (max 10 caractères, assigné automatiquement).
    2. Indexation :
        ◦ category_name est indexé pour des recherches rapides.

Contraintes d'Intégrité :
    1. Références :
        ◦ Category est liée aux modèles Ingredient et Recipe.
    2. Cohérence des Données :
        ◦ Validations appliquées lors des mises à jour (test_update_category et test_update_category_type).
        ◦ Suppression gérée avec précaution (test_delete_category_with_linked_objects).
    3. Protection contre les suppressions invalides
        ◦ Si une Category est utilisée par un Ingredient ou une Recipe, elle ne peut pas être supprimée (test_delete_category_with_linked_objects).
        ◦ Gestion via on_delete=PROTECT dans PostgreSQL.
        ◦ Vérification ajoutée dans destroy() de CategoryViewSet

Préparation pour la Production :
    Ajout de unique=True sur category_name en production :
        ◦ Actuellement, category_name n’a pas unique=True pour éviter des conflits en développement et permettre des tests.
        ◦ Une fois en production, unique=True sera ajouté pour garantir l’unicité en base.
        ◦ L’API continuera de vérifier l’unicité pour éviter les erreurs 500 Internal Server Error.



Synthèse des Contraintes pour le Modèle Label

        CONTRAINTES	                                                                 TEST CORRESPONDANT
Création d’une catégorie	                                                     -> test_create_label
label_name unique (en API, unique=True en production)                            -> test_create_duplicate_label
label_name normalisé en minuscule                                                -> test_label_name_is_normalized
label_name ne peut pas être vide                                                 -> test_create_label_without_name
Mise à jour du label_name                                                        -> test_update_label
Suppression d’une catégorie existante                                            -> test_delete_label
Récupération d’une catégorie existante                                           -> test_get_label
Erreur 404 si catégorie inexistante	                                             -> test_get_nonexistent_label et test_delete_nonexistent_label
Suppression bloquée si la catégorie est utilisée (ingredient ou recipe)          -> test_delete_label_with_linked_objects
label_name doit exister dans LABEL_NAME_CHOICES                                  -> test_create_label_invalid_name
Le label_type est automatiquement défini                                         -> test_label_type_assignment
Mise à jour interdite vers un label_name déjà existant                           -> test_update_label_to_duplicate
(OLD) label_name longueur min ≥ 2                                                -> test_label_name_cannot_be_too_short
(OLD) label_name ne peut pas être uniquement numérique                           -> test_label_name_cannot_be_numeric
(OLD) Mise à jour du label_type                                                  -> test_update_label_type
(OLD) label_type ne peut avoir que certaines valeurs (ingredient, recipe, both)  -> test_label_type_must_be_valid

Contraintes Métier :
    1. Nom de Catégorie (label_name) :
        ◦ Doit être unique.
        ◦ Ne peut pas être vide.
        ◦ Doit exister dans LABEL_NAME_CHOICES (contrôle strict).
        ◦ Est normalisé en minuscule.
    2. Type de Catégorie (label_type) : 
        ◦ Attribué automatiquement (values: recipe, ingredient, both) en fonction de label_name.
        ◦ Ne peut plus être défini manuellement par l’utilisateur.

Contraintes Techniques :
    1. Type de Données :
        ◦ label_name : CharField (max 200 caractères, valeurs prédéfinies).
        ◦ label_type : CharField (max 10 caractères, assigné automatiquement).
    2. Indexation :
        ◦ label_name est indexé pour des recherches rapides.

Contraintes d'Intégrité :
    1. Références :
        ◦ Label est liée aux modèles Ingredient et Recipe.
    2. Cohérence des Données :
        ◦ Validations appliquées lors des mises à jour (test_update_label et test_update_label_type).
        ◦ Suppression gérée avec précaution (test_delete_label_with_linked_objects).
    3. Protection contre les suppressions invalides
        ◦ Si une Label est utilisée par un Ingredient ou une Recipe, elle ne peut pas être supprimée (test_delete_label_with_linked_objects).
        ◦ Gestion via on_delete=PROTECT dans PostgreSQL.
        ◦ Vérification ajoutée dans destroy() de LabelViewSet

Préparation pour la Production :
    Ajout de unique=True sur label_name en production :
        ◦ Actuellement, label_name n’a pas unique=True pour éviter des conflits en développement et permettre des tests.
        ◦ Une fois en production, unique=True sera ajouté pour garantir l’unicité en base.
        ◦ L’API continuera de vérifier l’unicité pour éviter les erreurs 500 Internal Server Error.




Synthèse des Contraintes pour le Modèle Ingredient

        CONTRAINTES	                                                                 TEST CORRESPONDANT
Création d’un ingrédient	                                                -> test_create_ingredient
ingredient_name unique (en API, unique=True en production)	                -> test_create_duplicate_ingredient
ingredient_name normalisé (minuscule, sans espaces inutiles)	            -> test_ingredient_name_is_normalized
ingredient_name ne peut pas être vide	                                    -> test_ingredient_name_cannot_be_empty
Mise à jour du ingredient_name	                                            -> test_update_ingredient_name
Suppression d’un ingrédient existant	                                    -> test_delete_ingredient
Récupération d’un ingrédient existant                                       -> test_get_ingredient
Erreur 404 si ingrédient inexistant	                                        -> test_get_nonexistent_ingredient, test_delete_nonexistent_ingredient
Suppression bloquée si l’ingrédient est utilisé dans une recette        	-> test_delete_ingredient_used_in_recipe
Ajout d’un ingrédient avec une catégorie existante                      	-> test_create_ingredient_with_category
Ajout d’un ingrédient avec un label existant	                            -> test_create_ingredient_with_label
Interdiction d’assigner une catégorie inexistante	                        -> test_create_ingredient_with_nonexistent_category
Interdiction d’assigner un label inexistant                             	-> test_create_ingredient_with_nonexistent_label
Mise à jour interdite vers un ingredient_name déjà existant	                -> test_update_ingredient_to_duplicate
Suppression de catégorie/label uniquement si non utilisé	                -> test_update_ingredient_remove_category, test_update_ingredient_remove_label


Contraintes Métier :
1. Nom de l’Ingrédient (ingredient_name)
    ◦ Doit être unique.
    ◦ Ne peut pas être vide.
    ◦ Est normalisé en minuscule sans espaces superflus.
    ◦ Ne peut pas être uniquement numérique ("1234" est invalide).
    ◦ Doit contenir au moins 2 caractères.
2. Catégories & Labels
    ◦ Un ingrédient peut appartenir à plusieurs catégories et labels.
    ◦ Un ingrédient peut ne pas avoir de catégorie ni de label.
    ◦ Impossible d’assigner une catégorie ou un label inexistant en base.
3. Gestion des Suppressions
    ◦ Un ingrédient ne peut pas être supprimé s'il est utilisé dans une recette.
    ◦ Les catégories et labels peuvent être retirés d’un ingrédient uniquement s’ils existent encore ailleurs.

Contraintes Techniques :
1. Type de Données
    ◦ ingredient_name : CharField (200 caractères max, normalisé).
    ◦ categories : ManyToManyField(Category, related_name="ingredients").
    ◦ labels : ManyToManyField(Label, related_name="ingredients").
2. Indexation
    ◦ ingredient_name est indexé pour accélérer les recherches.

Contraintes d'Intégrité :
1. Références
    ◦ Ingredient est lié à Recipe via RecipeIngredient.
    ◦ Ingredient est lié à Category et Label via ManyToManyField.
2. Cohérence des Données
    ◦ Validation en API et en base (full_clean() avant save()).
    ◦ Impossible d’assigner une catégorie ou un label inexistant.
    ◦ Suppression sécurisée : on_delete=PROTECT pour empêcher la suppression d’un ingrédient utilisé dans une recette.

Préparation pour la Production
    1. Ajout de unique=True sur ingredient_name
        ◦ Actuellement, ingredient_name n’a pas unique=True pour éviter des erreurs bloquantes en développement et permettre les tests.
        ◦ Une fois en production, unique=True sera activé pour garantir l’unicité en base.
        ◦ L’API continuera d’appliquer la validation d’unicité pour éviter des erreurs IntegrityError.
    2. Gestion des Suppressions
            ◦ Vérification stricte via on_delete=PROTECT pour interdire la suppression d’un ingrédient s’il est utilisé.
            ◦ Double protection :
                ◦ Vérification au niveau API (destroy() dans IngredientViewSet).
                ◦ Vérification en base (PROTECT sur RecipeIngredient.ingredient).





Synthèse des Contraintes pour le Modèle Store


Création	
Vérifie la création d’un magasin	
Vérifie la normalisation du store_name	
Vérifie qu’on ne peut pas créer un magasin en doublon	
Vérifie qu’un store doit avoir soit city, soit zip_code	
Lecture	
Récupération d’un magasin existant	
Vérifie qu’un GET sur un store inexistant retourne une erreur 404
Mise à jour	
Vérifie la modification d’un champ unique (store_name, city, zip_code)
Vérifie qu’on ne peut pas modifier un store pour en faire un doublon
Suppression	
Vérifie qu’on peut supprimer un magasin existant
Vérifie qu’une tentative de suppression d’un magasin inexistant retourne une erreur 404

        CONTRAINTES	                                                                 TEST CORRESPONDANT
Création d’un store valide	                                                -> test_create_store
store_name obligatoire                                                      -> test_required_fields_store, test_required_fields_store_api
city ou zip_code obligatoire                                               	-> test_store_requires_city_or_zip_code
store_name et city normalisés (minuscule, sans espaces inutiles)            -> test_normalized_fields_store, test_normalized_fields_store_api
Longueur minimale de store_name et city                                     -> test_min_length_fields_store, test_min_length_fields_store_api
Mise à jour du store_name                                                   -> test_store_update, test_update_store_to_duplicate_api
Suppression d’un store existant                                             -> test_store_deletion
Interdiction de créer deux stores identiques (unique_together)              -> test_unique_constraint_store, test_unique_together_store_api
Erreur 400 si city et zip_code sont absents                                 -> test_store_requires_city_or_zip_code, test_store_requires_city_or_zip_code_api
Suppression bloquée si store utilisé dans un prix d’ingrédient              -> test_delete_store_used_in_prices


Contraintes Métier:
1. Nom du Store (store_name)
    ◦ Doit être obligatoirement renseigné.
    ◦ Doit contenir au moins 2 caractères.
    ◦ Normalisé en minuscule sans espaces superflus.
2. Ville (city) et Code Postal (zip_code)
    ◦ Au moins l’un des deux doit être renseigné.
    ◦ Peuvent être vides individuellement mais pas ensemble.
3. Unicité
    ◦ Deux magasins ne peuvent pas avoir simultanément le même store_name, city et zip_code.
4. Suppression sécurisée
    ◦ Un magasin ne peut pas être supprimé s’il est utilisé dans un IngredientPrice.

Contraintes Techniques:
1. Type de Donnée
    ◦ store_name : CharField (normalisé en minuscule, sans espaces superflus).
    ◦ city : CharField (optionnel si zip_code est présent).
    ◦ zip_code : CharField (optionnel si city est présent).
2. Indexation	
    ◦ Index sur (store_name, city, zip_code) pour optimiser la recherche et garantir l’unicité logique.

Contraintes d’Intégrité :
1. Références :
    ◦ Store est lié à IngredientPrice via une ForeignKey.
    ◦ Si un Store est utilisé dans IngredientPrice, sa suppression est interdite (on_delete=PROTECT)
2. Cohérence des Données :
    ◦ Unicité d’un store : Validation métier en API et en base (full_clean() avant save()).
    ◦ Un store doit toujours avoir une city ou un zip_code.
    ◦ Un store ne peut pas être supprimé s'il est référencé dans IngredientPrice.
    ◦ Suppression : Vérifié via les tests CRUD
    ◦ Normalisation des noms : Vérifié via test_store_fields_are_normalized

Préparation à la Production : 
1. Ajout de Contrainte d’Unicité
    ◦ Actuellement, unique_together est appliqué via l’API, mais pas directement en base pour faciliter les tests.
    ◦ En production, on pourra ajouter une contrainte unique en base de données.
2. Gestion des Suppressions
    Double protection :
        ◦ Vérification en API (dans destroy() de StoreViewSet).
        ◦ Vérification en base (on_delete=PROTECT sur IngredientPrice.store).
3. Validation stricte
    ◦ unique_together protège contre les doublons
    ◦ API empêche la création de magasins invalides
4. Sécurisation des Données
    ◦ Vérification des entrées avant insertion en base
    ◦ Suppression sécurisée sans effet de bord