Synthèse des Contraintes pour le Modèle Category


        CONTRAINTES	                                                                 TEST CORRESPONDANT
Création d’une catégorie	                                                        -> test_create_category
category_name unique (en API, unique=True en production)                            -> test_create_duplicate_category
category_name et parent_category normalisé en minuscule                             -> test_normalized_fields_category_api
category_name ne peut pas être vide                                                 -> test_required_fields_category_api
Mise à jour du category_name                                                        -> test_update_category
Suppression d’une catégorie existante                                               -> test_delete_category
Récupération d’une catégorie existante                                              -> test_get_category
Erreur 404 si catégorie inexistante	                                                -> test_get_nonexistent_category et test_delete_nonexistent_category
Suppression bloquée si la catégorie est utilisée (ingredient ou recipe)             -> test_delete_category_with_linked_objects
category_type doit être une valeur valide (recipe, ingredient, both)                -> test_create_category_invalid_type
Mise à jour interdite vers un category_name déjà existant                           -> test_update_category_to_duplicate_api
Suppression d’une catégorie avec des sous-catégories	                            -> test_delete_category_with_subcategories (API) & test_delete_category_with_subcategories_model (Base)
Mise à jour partielle (PATCH) du parent_category	                                -> test_partial_update_category
Création d’une catégorie avec un parent_category invalide	                        -> test_create_category_with_invalid_parent
Création d’une catégorie avec un parent_category valide	                            -> test_parent_category_validation
Détachement d’une sous-catégorie (parent_category=None)                         	-> test_parent_category_is_optional
Vérification de la normalisation de category_type (ex: uppercase ➝ lowercase)      	-> test_normalized_fields_category_api


Contraintes Métier :
    1. Nom de Catégorie (category_name) :
        ◦ Doit être unique (contrôle API et DB en production).
        ◦ Ne peut pas être vide.
        ◦ Est normalisé en minuscule.
    2. Type de Catégorie (category_type) : 
        ◦ Doit être l’une des valeurs suivantes : recipe, ingredient, both.
        ◦ Doit être validé en API et en base de données.
        ◦ Normalisation automatique en minuscule.
    3. Parent de Catégorie (parent_category)
        ◦ Peut être NULL (catégorie racine).
        ◦ Si défini, doit être un category_name existant.
        ◦ Peut être modifié via PATCH.
        ◦ Une sous-catégorie peut être détachée de son parent (parent_category=None).

Contraintes Techniques :
    1. Type de Données :
        ◦ category_name : CharField (max 200 caractères, valeurs prédéfinies).
        ◦ category_type : CharField (max 10 caractères, doit être recipe, ingredient, both).
        ◦ parent_category : ForeignKey vers self, optionnel (on_delete=models.SET_NULL)
    2. Indexation :
        ◦ category_name est indexé pour des recherches rapides.

Contraintes d'Intégrité :
    1. Références :
        ◦ Category est liée aux modèles Ingredient et Recipe.
    2. Cohérence des Données :
        ◦ Mises à jour contrôlées (test_update_category).
        ◦ Suppression gérée avec précaution (test_delete_category_with_linked_objects).
    3. Protection contre les suppressions invalides
        ◦ Si une Category est utilisée par un Ingredient ou une Recipe, elle ne peut pas être supprimée.
        ◦ Gestion via on_delete=PROTECT dans PostgreSQL.
        ◦ Vérification ajoutée dans destroy() de CategoryViewSet

Gestion de la Suppression d'une Catégorie avec des Sous-Catégories
    Suppression d'une catégorie sans sous-catégories        -> Suppression directe
    Suppression d'une catégorie avec des sous-catégories (on_delete=models.SET_NULL)    -> parent_category des sous-catégories devient NULL
    Suppression avec ?delete_subcategories=true     -> Supprime aussi les sous-catégories

Préparation pour la Production :
    Ajout de unique=True sur category_name en production :
        ◦ Actuellement, category_name n’a pas unique=True pour éviter des conflits en développement et permettre des tests.
        ◦ Une fois en production, unique=True sera ajouté pour garantir l’unicité en base.
        ◦ L’API empêche déjà les doublons, donc aucune erreur 500 (IntegrityError) ne devrait survenir après l’activation.



Synthèse des Contraintes pour le Modèle Label

        CONTRAINTES	                                                                 TEST CORRESPONDANT
Création d’un label     	                                                     -> test_create_label
label_name unique (géré en API, unique=True en production)                       -> test_create_duplicate_label_api
label_name normalisé en minuscule                                                -> test_normalized_fields_label_api
label_name ne peut pas être vide                                                 -> test_required_fields_label_api
Mise à jour du label_name                                                        -> test_label_update
Suppression d’un label existant                                                  -> test_delete_label
Récupération d’un label existant                                                 -> test_get_label
Erreur 404 si le label inexistante	                                             -> test_get_nonexistent_label et test_delete_nonexistent_label
Suppression bloquée si le label est utilisé (ingredient ou recipe)               -> test_delete_label_with_linked_objects
label_type doit être une valeur valide (recipe, ingredient, both)	             -> test_create_label_invalid_type
Mise à jour interdite vers un label_name déjà existant                           -> test_update_label_to_duplicate_api
Vérification de la normalisation de label_type (ex: uppercase ➝ lowercase)	     -> test_normalized_fields_label_api
Un utilisateur non-admin ne peut pas créer un label	                             -> test_non_admin_cannot_create_label
Un utilisateur non-admin ne peut pas supprimer un label	                         -> test_non_admin_cannot_delete_label

Contraintes Métier :
    1. Nom de Label (label_name) :
        ◦ Doit être unique.
        ◦ Ne peut pas être vide.
        ◦ Est normalisé en minuscule avant stockage.
    2. Type de Label (label_type) : 
        ◦ Doit être l’une des valeurs suivantes : recipe, ingredient, both.
        ◦ Doit être validé en API et en base de données.
        ◦ Normalisation automatique en minuscule.

Contraintes Techniques :
    1. Type de Données :
        ◦ label_name : CharField (max 200 caractères, unique=True en production).
        ◦ label_type : CharField (max 10 caractères, doit être recipe, ingredient, both).
    2. Indexation :
        ◦ label_name est indexé pour optimiser les recherches.
    3. Gestion des Permissions : 
        ◦ Tous les utilisateurs peuvent lire les labels, mais seuls les admins peuvent créer, modifier et supprimer.

Contraintes d'Intégrité :
    1. Références :
        ◦ Label est liée aux modèles Ingredient et Recipe via les tables intermédiaires IngredientLabel et RecipeLabel.
    2. Cohérence des Données :
        ◦ Mises à jour contrôlées.
        ◦ SSuppression gérée avec précaution.
    3. Protection contre les suppressions invalides
        ◦ Si un label est utilisé par un Ingredient ou une Recipe, il ne peut pas être supprimé.
        ◦ Gestion via on_delete=PROTECT dans PostgreSQL.
        ◦ Vérification ajoutée dans destroy() de LabelViewSet

Préparation pour la Production :
    Ajout de unique=True sur label_name en production :
        ◦ Actuellement, label_name n’a pas unique=True pour éviter des conflits en développement et permettre des tests.
        ◦ Une fois en production, unique=True sera ajouté pour garantir l’unicité en base.
        ◦ L’API empêche déjà les doublons, donc aucune erreur 500 (IntegrityError) ne devrait survenir après l’activation.




Synthèse des Contraintes pour le Modèle Ingredient

        CONTRAINTES	                                                                 TEST CORRESPONDANT
Création d’un ingrédient	                                                -> test_create_ingredient
ingredient_name unique (en API, unique=True en production)	                -> test_create_duplicate_ingredient
ingredient_name normalisé (minuscule, sans espaces inutiles)	            -> test_ingredient_name_is_normalized
ingredient_name ne peut pas être vide	                                    -> test_ingredient_name_cannot_be_empty
Mise à jour du ingredient_name	                                            -> test_update_ingredient_name
Suppression d’un ingrédient existant	                                    -> test_delete_ingredient
Récupération d’un ingrédient existant                                       -> test_get_ingredient
Erreur 404 si ingrédient inexistant	                                        -> test_get_nonexistent_ingredient, test_delete_nonexistent_ingredient
Suppression bloquée si l’ingrédient est utilisé dans une recette        	-> test_delete_ingredient_used_in_recipe
Ajout d’un ingrédient avec une catégorie existante                      	-> test_create_ingredient_with_category
Ajout d’un ingrédient avec un label existant	                            -> test_create_ingredient_with_label
Interdiction d’assigner une catégorie inexistante	                        -> test_create_ingredient_with_nonexistent_category
Interdiction d’assigner un label inexistant                             	-> test_create_ingredient_with_nonexistent_label
Mise à jour interdite vers un ingredient_name déjà existant	                -> test_update_ingredient_to_duplicate
Suppression de catégorie/label uniquement si non utilisé	                -> test_update_ingredient_remove_category, test_update_ingredient_remove_label


Contraintes Métier :
1. Nom de l’Ingrédient (ingredient_name)
    ◦ Doit être unique.
    ◦ Ne peut pas être vide.
    ◦ Est normalisé en minuscule sans espaces superflus.
    ◦ Ne peut pas être uniquement numérique ("1234" est invalide).
    ◦ Doit contenir au moins 2 caractères.
2. Catégories & Labels
    ◦ Un ingrédient peut appartenir à plusieurs catégories et labels.
    ◦ Un ingrédient peut ne pas avoir de catégorie ni de label.
    ◦ Impossible d’assigner une catégorie ou un label inexistant en base.
3. Gestion des Suppressions
    ◦ Un ingrédient ne peut pas être supprimé s'il est utilisé dans une recette.
    ◦ Les catégories et labels peuvent être retirés d’un ingrédient uniquement s’ils existent encore ailleurs.
    ◦ Un Ingredient supprimé supprime tous ses prix en cours (IngredientPrice), mais conserve l’historique (IngredientPriceHistory) avec ingredient_name.

Contraintes Techniques :
1. Type de Données
    ◦ ingredient_name : CharField (200 caractères max, normalisé).
    ◦ categories : ManyToManyField(Category, related_name="ingredients").
    ◦ labels : ManyToManyField(Label, related_name="ingredients").
2. Indexation
    ◦ ingredient_name est indexé pour accélérer les recherches.

Contraintes d'Intégrité :
1. Références
    ◦ Ingredient est lié à Recipe via RecipeIngredient.
    ◦ Ingredient est lié à Category et Label via ManyToManyField.
2. Cohérence des Données
    ◦ Validation en API et en base (full_clean() avant save()).
    ◦ Impossible d’assigner une catégorie ou un label inexistant.
    ◦ Suppression sécurisée : on_delete=PROTECT pour empêcher la suppression d’un ingrédient utilisé dans une recette.

Préparation pour la Production
    1. Ajout de unique=True sur ingredient_name
        ◦ Actuellement, ingredient_name n’a pas unique=True pour éviter des erreurs bloquantes en développement et permettre les tests.
        ◦ Une fois en production, unique=True sera activé pour garantir l’unicité en base.
        ◦ L’API continuera d’appliquer la validation d’unicité pour éviter des erreurs IntegrityError.
    2. Gestion des Suppressions
            ◦ Vérification stricte via on_delete=PROTECT pour interdire la suppression d’un ingrédient s’il est utilisé.
            ◦ Double protection :
                ◦ Vérification au niveau API (destroy() dans IngredientViewSet).
                ◦ Vérification en base (PROTECT sur RecipeIngredient.ingredient).





Synthèse des Contraintes pour le Modèle Store


Création	
Vérifie la création d’un magasin	
Vérifie la normalisation du store_name	
Vérifie qu’on ne peut pas créer un magasin en doublon	
Vérifie qu’un store doit avoir soit city, soit zip_code	
Lecture	
Récupération d’un magasin existant	
Vérifie qu’un GET sur un store inexistant retourne une erreur 404
Mise à jour	
Vérifie la modification d’un champ unique (store_name, city, zip_code)
Vérifie qu’on ne peut pas modifier un store pour en faire un doublon
Suppression	
Vérifie qu’on peut supprimer un magasin existant
Vérifie qu’une tentative de suppression d’un magasin inexistant retourne une erreur 404

        CONTRAINTES	                                                                 TEST CORRESPONDANT
Création d’un store valide	                                                -> test_create_store
store_name obligatoire                                                      -> test_required_fields_store, test_required_fields_store_api
city ou zip_code obligatoire                                               	-> test_store_requires_city_or_zip_code
store_name et city normalisés (minuscule, sans espaces inutiles)            -> test_normalized_fields_store, test_normalized_fields_store_api
Longueur minimale de store_name et city                                     -> test_min_length_fields_store, test_min_length_fields_store_api
Mise à jour du store_name                                                   -> test_store_update, test_update_store_to_duplicate_api
Suppression d’un store existant                                             -> test_store_deletion
Interdiction de créer deux stores identiques (unique_together)              -> test_unique_constraint_store, test_unique_together_store_api
Erreur 400 si city et zip_code sont absents                                 -> test_store_requires_city_or_zip_code, test_store_requires_city_or_zip_code_api
Suppression bloquée si store utilisé dans un prix d’ingrédient              -> test_delete_store_used_in_prices


Contraintes Métier:
1. Nom du Store (store_name)
    ◦ Doit être obligatoirement renseigné.
    ◦ Doit contenir au moins 2 caractères.
    ◦ Normalisé en minuscule sans espaces superflus.
2. Ville (city) et Code Postal (zip_code)
    ◦ Au moins l’un des deux doit être renseigné.
    ◦ Peuvent être vides individuellement mais pas ensemble.
3. Unicité
    ◦ Deux magasins ne peuvent pas avoir simultanément le même store_name, city et zip_code.
4. Suppression sécurisée
    ◦ Un magasin ne peut pas être supprimé s’il est utilisé dans un IngredientPrice.

Contraintes Techniques:
1. Type de Donnée
    ◦ store_name : CharField (normalisé en minuscule, sans espaces superflus).
    ◦ city : CharField (optionnel si zip_code est présent).
    ◦ zip_code : CharField (optionnel si city est présent).
2. Indexation	
    ◦ Index sur (store_name, city, zip_code) pour optimiser la recherche et garantir l’unicité logique.

Contraintes d’Intégrité :
1. Références :
    ◦ Store est lié à IngredientPrice via une ForeignKey.
    ◦ Si un Store est utilisé dans IngredientPrice, sa suppression est interdite (on_delete=PROTECT)
2. Cohérence des Données :
    ◦ Unicité d’un store : Validation métier en API et en base (full_clean() avant save()).
    ◦ Un store doit toujours avoir une city ou un zip_code.
    ◦ Un store ne peut pas être supprimé s'il est référencé dans IngredientPrice.
    ◦ Suppression : Vérifié via les tests CRUD
    ◦ Normalisation des noms : Vérifié via test_store_fields_are_normalized

Préparation à la Production : 
1. Ajout de Contrainte d’Unicité
    ◦ Actuellement, unique_together est appliqué via l’API, mais pas directement en base pour faciliter les tests.
    ◦ En production, on pourra ajouter une contrainte unique en base de données.




Synthèse des Contraintes pour le Modèle IngredientPrice


        CONTRAINTES	                                                                                 TEST CORRESPONDANT
Création d’un IngredientPrice valide	                                                        -> test_create_ingredientprice_api
Vérifie que ingredient, store, price, quantity, unit sont obligatoires	                        -> test_required_fields_ingredientprice_db, test_required_fields_ingredientprice_api
Vérifie que unit est bien dans UNIT_CHOICES et normalisé	                                    -> test_invalid_choice_fields_ingredientprice_db, test_invalid_choice_fields_ingredientprice_api, test_normalized_fields_ingredientprice_db, test_normalized_fields_ingredientprice_api
Vérifie que brand_name et unit sont bien normalisés	                                            -> test_normalized_fields_ingredientprice_db, test_normalized_fields_ingredientprice_api
Vérifie que price et quantity doivent être strictement positifs	                                -> test_positive_values_ingredientprice_db, test_positive_values_ingredientprice_api
Vérifie qu’un IngredientPrice est unique (même ingredient, store, brand_name, quantity, unit)	-> test_unique_constraint_ingredientprice_db, test_unique_together_ingredientprice_api
Vérifie qu’on ne peut pas modifier un IngredientPrice	                                        -> test_update_ingredientprice_api_forbidden
Vérifie que la mise à jour d’un prix crée un nouvel IngredientPrice et archive l’ancien	        -> test_price_update_creates_new_ingredientprice
Vérifie qu’un IngredientPrice peut être supprimé	                                            -> test_delete_ingredientprice_api
Vérifie qu’on ne peut pas supprimer un IngredientPrice utilisé dans IngredientPriceHistory	    -> test_delete_ingredientprice_api_forbidden
Vérifie que la suppression d’un Ingredient supprime bien ses prix actuels                       -> test_ingredient_deletion_removes_prices

Contraintes Métier:
1. Obligations des Champs
    ◦ ingredient, store, price, quantity et unit sont obligatoires.
    ◦ brand_name est optionnel mais normalisé.
    ◦ date est facultatif mais par défaut fixé à la date du jour.
2. Validation des Valeurs
    ◦ price et quantity doivent être strictement positifs.
    ◦ unit doit appartenir à UNIT_CHOICES et est normalisé ("Kg" → "kg").
3. Unicité
    ◦ Un IngredientPrice est unique sur (ingredient, store, brand_name, quantity, unit).
    ◦ Si le prix change pour un même ingrédient, l’ancien est archivé dans IngredientPriceHistory.
4. Mise à Jour
    ◦ Pas d’update d’un IngredientPrice (nouvel enregistrement à chaque changement).
    ◦ Seule la modification de promotion_end_date est autorisée.
5. Suppression Sécurisée
    ◦ Un IngredientPrice supprimé est automatiquement archivé dans IngredientPriceHistory.

Contraintes Techniques:
1. Type de Données
    ◦ price et quantity sont stockés en DecimalField, mais acceptent des int (convertis en float).
    ◦ unit est un CharField avec des choix limités (UNIT_CHOICES).
2. Indexation
    ◦ Index sur (ingredient, store, brand_name, quantity, unit) pour optimiser les requêtes.
    ◦ Index sur date pour les recherches temporelles.
3. Gestion des suppressions
    on_delete=models.CASCADE sur l'ingrédient → Supprime les prix actifs avec l’ingrédient.




Synthèse des Contraintes pour le Modèle IngredientPriceHistory

        CONTRAINTES	                                                                                 TEST CORRESPONDANT
Récupération d’un historique spécifique	                                        -> test_get_ingredientpricehistory_detail_api
Vérifie qu’on peut récupérer la liste des historiques	                        -> test_get_ingredientpricehistory_list_api
Vérifie que la création d’un IngredientPriceHistory est interdite via l’API	    -> test_create_ingredientpricehistory_api_forbidden
Vérifie qu’un IngredientPriceHistory est bien créé lorsqu’un prix change	    -> test_price_update_creates_new_ingredientprice
Vérifie que la mise à jour d’un historique de prix est interdite via l’API	    -> test_update_ingredientpricehistory_api_forbidden
Vérifie que la suppression d’un historique de prix est interdite via l’API	    -> test_delete_ingredientpricehistory_api_forbidden
Vérifie que l’historique est bien conservé après suppression d’un ingrédient    -> test_ingredient_deletion_keeps_history
Vérifie que la suppression d’un prix l’archive dans l'historique.               -> test_ingredientprice_deletion_creates_history

Contraintes Métier:
0. Création
    ◦ L’archivage d’un prix est automatique lorsqu’un prix existant est modifié.
    ◦ Un IngredientPriceHistory est généré automatiquement, il ne peut pas être créé ou modifié manuellement.
1. Obligations des Champs
    ◦ ingredient, store, price, quantity, unit et date sont obligatoires.
    ◦ is_promo et promotion_end_date doivent être cohérents (promotion_end_date requiert is_promo=True).
2. Validation des Valeurs
    ◦ price et quantity doivent être strictement positifs.
    ◦ unit est validé et normalisé ("Kg" → "kg").
3. Unicité
    ◦ Pas de contrainte stricte en base sur (date, price), mais les doublons inutiles sont empêchés via clean().
4. Lecture et Protection
    ◦ IngredientPriceHistory est en lecture seule via l’API (ReadOnlyModelViewSet).
    ◦ Aucune modification ni suppression autorisée via l’API.
5. Historique
    ◦ L’historique d’un ingrédient supprimé ne référence plus l’ingrédient en ForeignKey, mais conserve son nom (ingredient_name).

Contraintes Techniques:
1. Type de Données
    ◦ price et quantity sont stockés en DecimalField, comme dans IngredientPrice.
    ◦ date est un DateField obligatoire.
    ◦ on_delete=models.SET_NULL sur l'ingrédient → Conserve l’historique sans référence directe.
    ◦ L’ingredient_name de IngredientPriceHistory est mis à jour lors de l’archivage.
2. Indexation
    ◦ Index sur (ingredient, date) pour améliorer les performances.
3. Intégrité
    ◦ Lecture seule via l’API.
    ◦ Suppression interdite en API, mais possible en base pour un superutilisateur uniquement.



Synthèse des Contraintes pour le Modèle RecipeStep

        CONTRAINTES	                                                                                 TEST CORRESPONDANT
Création d’une étape valide                             -> test_create_recipestep
step_number unique par recette                          -> test_unique_constraint_recipestep et test_unique_value_api
step_number doit être consécutif                       	-> test_step_number_must_be_strictly_increasing et test_step_number_must_be_strictly_increasing_api
step_number >= 1                                    	-> test_step_number_must_start_at_1 et test_step_number_must_start_at_1_api
Auto-incrémentation de step_number	                    -> test_step_number_auto_increment et test_create_step_auto_increment_api
instruction obligatoire	                                -> test_required_fields_recipestep et test_required_fields_recipestep_api
instruction longueur minimale                        	-> test_min_length_instruction_recipestep et test_min_length_fields_recipestep_api
trick est un champ optionnel	                        -> test_optional_field_recipestep et test_trick_is_optional_api
Mise à jour d’un RecipeStep	                            -> test_recipestep_update et test_partial_update_recipestep
Suppression d’un RecipeStep	                            -> test_recipestep_deletion et test_delete_recipestep
Suppression interdite du dernier RecipeStep	            -> test_cannot_delete_last_recipe_step et test_cannot_delete_last_recipestep_api
Suppression d’un RecipeStep réorganise les numéros	    -> test_deleting_step_reorders_steps
Suppression d’un RecipeStep inexistant	                -> test_delete_nonexistent_recipestep
Récupération d’un RecipeStep existant	                -> test_get_recipestep
Erreur 404 si RecipeStep inexistant	                    -> test_get_nonexistent_recipestep

Contraintes Métier:
1. step_number
    ◦ Doit être unique pour une même recette.
    ◦ Doit être consécutif (ex : 1 → 2 → 3, pas 1 → 3).
    ◦ Doit être ≥ 1.
    ◦ Si non fourni, il est auto-incrémenté.
2. instruction
    ◦ Obligatoire.
    ◦ Doit avoir au moins 5 caractères.
3. trick
    ◦ Optionnel (None ou "").

Contraintes Techniques:
1. Type de Données
    ◦ recipe : ForeignKey(Recipe) -> Lié à Recipe, suppression en cascade (on_delete=models.CASCADE)
    ◦ step_number : IntegerField -> MinValueValidator(1), unique avec recipe
    ◦ instruction : TextField -> max_length=250
    ◦ trick : TextField	-> max_length=100, null=True, blank=True
2. Indexation
    ◦ step_number est indexé pour des recherches rapides.
    ◦ Contrainte unique_together ("recipe", "step_number") appliquée en base.

Contraintes d'Intégrité :
1. Références
    ◦ RecipeStep est lié à Recipe.
2. Cohérence des Données
    ◦ Mise à jour contrôlée (test_recipestep_update).
    ◦ Suppression gérée avec précaution (test_cannot_delete_last_recipe_step).
    ◦ Si le step_number n'est pas fourni il est calculé automatiquement.
3. Protection contre les suppressions invalides
    ◦ Si une recette n’a qu’un seul RecipeStep, la suppression est bloquée.
    ◦ Après suppression d’un RecipeStep, les step_number sont réorganisés.